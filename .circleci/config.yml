defaults: &defaults
  working_directory: ~/repo

version: 2
jobs:
  lint-testunit:
    <<: *defaults
    docker:
      - image: circleci/node:8

    environment:
      CODECOV_TOKEN: caa771ab-3d45-4756-8e2a-e1f25996fef6

    steps:
      - checkout

      - restore_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Install NPM modules
          command: |
            yarn

      - run:
          name: Lint
          command: |
            yarn lint

      - run:
          name: Test
          command: |
            yarn test

      - run:
          name: Codecov
          command: |
            yarn codecov

      - save_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

  e2e-test-ios:
    macos:
      xcode: "10.2.1"

    environment:
      BASH_ENV: "~/.nvm/nvm.sh"

    steps:
      - checkout

      - run:
          name: Install Node 8
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
            source ~/.nvm/nvm.sh
            # https://github.com/creationix/nvm/issues/1394
            set +e
            nvm install 8

      - run:
          name: Install appleSimUtils
          command: |
            brew update
            brew tap wix/brew
            brew install wix/brew/applesimutils

      - run:
          name: Install NPM modules
          command: |
            yarn global add detox-cli
            yarn

      - run:
          name: Build
          command: |
            detox build --configuration ios.sim.release

      - run:
          name: Test
          command: |
            detox test --configuration ios.sim.release --cleanup --loglevel verbose

      - store_artifacts:
          path: /tmp/screenshots

  e2e-test-android:
    macos:
      xcode: "10.2.1"
    environment:
      BASH_ENV: "~/.nvm/nvm.sh"
    steps:
      - checkout
      - run:
          command: |
            echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:~/.yarn/bin:~/project/node_modules/.bin:~/project/example/node_modules/.bin"' >> $BASH_ENV
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export PATH="$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH"' >> $BASH_ENV
            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
            echo 'export JAVA_HOME=/Library/Java/Home' >> $BASH_ENV
            source $BASH_ENV
          name: Configure Environment Variables
      - run:
          command: |
            echo 'KEYSTORE=RocketChatDebug' >> android/gradle.properties
            echo 'KEYSTORE_PASSWORD=RocketChatDebug' >> android/gradle.properties
            echo 'KEY_ALIAS=RocketChatDebug' >> android/gradle.properties
            echo 'KEY_PASSWORD=RocketChatDebug' >> android/gradle.properties
          name: Configure Keystore Variables

      - restore_cache:
          key: |
            brew-cache-{{ arch }}-{{ .Environment.CACHE_VERSION }}
      - restore_cache:
          key: android-{{ checksum ".circleci/config.yml" }}-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

      - restore_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
      - run:
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap wix/brew >/dev/null
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask >/dev/null
            HOMEBREW_NO_AUTO_UPDATE=1 brew install node@8 >/dev/null
            HOMEBREW_NO_AUTO_UPDATE=1 brew install applesimutils >/dev/null
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk >/dev/null
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install intel-haxm >/dev/null
            touch .watchmanconfig
            node -v
          name: Configure Detox Environment
      - run:
          command: |
            cd /tmp
            git clone https://github.com/facebook/FBSimulatorControl.git FBSimulatorControl
            cd FBSimulatorControl
            git checkout 778f9825cb82aabac82f1ed474f1dba1e0276211
            ./build.sh fbsimctl build >/dev/null
            cp -r build/Build/Products/Debug/* /usr/local/bin
            which fbsimctl
          name: Install FBSimulatorControl
      - run:
          name: Install NPM modules
          command: |
            yarn global add detox-cli
            yarn
      - save_cache:
          key: |
            brew-cache-{{ arch }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - /usr/local/Homebrew
            - ~/Library/Caches/Homebrew
      - save_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - save_cache:
          key: android-{{ checksum ".circleci/config.yml" }}-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
          paths:
            - ~/.gradle
#      - run:
#          command: echo -e "console.disableYellowBox = true;" >> ./index.js
#          name: Append "console.disableYellowBox = true;" to index.js
#      - run:
#          background: true
#          command: react-native start
#          name: Start Metro Packager (Background)
      - run:
          name: Detox Build Android App
          command: |
            detox build --configuration android.emu.release
      - run:
          command: |
            yes | sdkmanager "platform-tools" "tools" >/dev/null
            yes | sdkmanager "platforms;android-27" "system-images;android-27;google_apis;x86" >/dev/null
            yes | sdkmanager "emulator" --channel=3 >/dev/null
            yes | sdkmanager "build-tools;27.0.3" >/dev/null
            yes | sdkmanager --licenses >/dev/null
            yes | sdkmanager --list
          name: Install Android Emulator
          shell: /bin/bash -e
      - run:
          command: |
            adb start-server
            adb devices
            adb kill-server
            ls -la ~/.android
          name: ADB Start Stop
      - run:
          command: avdmanager create avd --force -n Pixel_3_XL_API_27 -k "system-images;android-27;google_apis;x86"
            -g google_apis -d "Nexus 4"
          name: Create Android Emulator
      - run:
          background: true
          command: |
            /usr/local/share/android-sdk/emulator/emulator @Pixel_3_XL_API_27 -version
            /usr/local/share/android-sdk/emulator/emulator @Pixel_3_XL_API_27 -skin 1440x2880 -cores 2 -gpu auto -accel on -memory 4096 -no-audio -no-snapshot -no-boot-anim -no-window -logcat *:W | grep -i 'ReactNative\|rocket'
          name: Start Android Emulator (background)
      - run:
          command: |
            export BOOT=""
            echo "Waiting for AVD to finish booting"
            export PATH=$(dirname $(dirname $(command -v android)))/platform-tools:$PATH
            until [[ "$BOOT" =~ "1" ]]; do
              sleep 5
              export BOOT=$(adb -e shell getprop sys.boot_completed 2>&1)
            done
            sleep 15
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            echo "Android Virtual Device is now ready."
          name: Wait for AVD to be ready
          no_output_timeout: 5m
      - run:
          command: detox test -c android.emu.release -l trace --headless
          name: Detox Test
      - store_artifacts:
          path: /tmp/screenshots

  android-build:
    <<: *defaults
    docker:
      - image: circleci/android:api-28-node

    environment:
      # GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false
      JVM_OPTS: -Xmx4096m
      TERM: dumb
      BASH_ENV: "~/.nvm/nvm.sh"

    steps:
      - checkout

      - restore_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Install NPM modules
          command: |
            yarn

      - restore_cache:
          key: android-{{ checksum ".circleci/config.yml" }}-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

      - run:
          name: Configure Gradle
          command: |
            cd android

            echo -e "" > ./gradle.properties
            echo -e "android.enableAapt2=false" >> ./gradle.properties

            if [[ $KEYSTORE ]]; then
              echo $KEYSTORE_BASE64 | base64 --decode > ./app/$KEYSTORE
              echo -e "KEYSTORE=$KEYSTORE" >> ./gradle.properties
              echo -e "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> ./gradle.properties
              echo -e "KEY_ALIAS=$KEY_ALIAS" >> ./gradle.properties
              echo -e "KEY_PASSWORD=$KEYSTORE_PASSWORD" >> ./gradle.properties
            fi

            echo -e "VERSIONCODE=$CIRCLE_BUILD_NUM" >> ./gradle.properties

      - run:
          name: Set Google Services
          command: |
            cd android/app
            cp google-services.prod.json google-services.json

      - run:
          name: Build Android App
          command: |
            cd android
            if [[ $KEYSTORE ]]; then
              ./gradlew bundleRelease
            else
              ./gradlew assembleDebug
            fi

            mkdir -p /tmp/build

            mv app/build/outputs /tmp/build/

      - store_artifacts:
          path: /tmp/build/outputs

      - save_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

      - save_cache:
          key: android-{{ checksum ".circleci/config.yml" }}-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
          paths:
            - ~/.gradle

  ios-build:
    macos:
      xcode: "10.2.1"

    environment:
      BASH_ENV: "~/.nvm/nvm.sh"

    steps:
      - checkout

      - run:
          name: Install Node 8
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
            source ~/.nvm/nvm.sh
            # https://github.com/creationix/nvm/issues/1394
            set +e
            nvm install 8

      - run:
          name: Update Fastlane
          command: |
            brew update
            brew install ruby
            sudo gem install fastlane

      - run:
          name: Install NPM modules
          command: |
            yarn

      - run:
          name: Set Google Services
          command: |
            cd ios
            cp GoogleService-Info.prod.plist GoogleService-Info.plist

      - run:
          name: Fastlane Build
          no_output_timeout: 1200
          command: |
            cd ios
            agvtool new-version -all $CIRCLE_BUILD_NUM

            if [[ $MATCH_KEYCHAIN_NAME ]]; then
              fastlane ios release
            else
              export MATCH_KEYCHAIN_NAME="temp"
              export MATCH_KEYCHAIN_PASSWORD="temp"
              fastlane ios build
            fi

      - store_artifacts:
          path: ios/RocketChatRN.ipa

      - persist_to_workspace:
          root: .
          paths:
            - ios/*.ipa
            - ios/fastlane/report.xml

  ios-testflight:
    macos:
      xcode: "10.2.1"

    steps:
      - checkout

      - attach_workspace:
          at: ios

      - run:
          name: Update Fastlane
          command: |
            brew update
            brew install ruby
            sudo gem install fastlane

      - run:
          name: Fastlane Tesflight Upload
          command: |
            cd ios
            fastlane pilot upload --ipa ios/RocketChatRN.ipa --changelog "$(sh ../.circleci/changelog.sh)"

workflows:
  version: 2
  build-and-test:
    jobs:
      - lint-testunit

      - e2e-hold-ios:
          type: approval
          requires:
            - lint-testunit
      - e2e-test-ios:
          requires:
            - e2e-hold-ios
      - e2e-hold-android:
          type: approval
          requires:
            - lint-testunit
      - e2e-test-android:
          requires:
            - e2e-hold-android

      - ios-build:
          requires:
            - lint-testunit
      - ios-hold-testflight:
          type: approval
          requires:
            - ios-build
      - ios-testflight:
          requires:
            - ios-hold-testflight

      - android-build:
          requires:
            - lint-testunit
