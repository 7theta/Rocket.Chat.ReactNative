diff --git a/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm b/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
index e72e943..c63843e 100644
--- a/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
+++ b/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
@@ -10,6 +10,7 @@
 #import <mutex>
 
 #import <React/RCTNetworking.h>
+#import "UrlCredentials.h"
 
 @interface RCTHTTPRequestHandler () <NSURLSessionDataDelegate>
 
@@ -171,4 +172,10 @@ - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didComp
   [delegate URLRequest:task didCompleteWithError:error];
 }
 
+-(void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler {
+  NSURLCredential *credential = [UrlCredentials getUrlCredential];
+
+  completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
+}
+
 @end
diff --git a/node_modules/react-native/Libraries/WebSocket/RCTSRWebSocket.m b/node_modules/react-native/Libraries/WebSocket/RCTSRWebSocket.m
index a134d2e..1a4fd9b 100644
--- a/node_modules/react-native/Libraries/WebSocket/RCTSRWebSocket.m
+++ b/node_modules/react-native/Libraries/WebSocket/RCTSRWebSocket.m
@@ -27,6 +27,8 @@
 #import <React/RCTAssert.h>
 #import <React/RCTLog.h>
 
+#import "UrlCredentials.h"
+
 typedef NS_ENUM(NSInteger, RCTSROpCode)  {
   RCTSROpCodeTextFrame = 0x1,
   RCTSROpCodeBinaryFrame = 0x2,
@@ -518,6 +520,11 @@ - (void)_initializeStreams;
     RCTLogInfo(@"SocketRocket: In debug mode.  Allowing connection to any root cert");
 #endif
 
+    NSArray* certificates = [UrlCredentials getCertificates];
+    if (certificates != nil) {
+      [SSLOptions setObject:certificates forKey:(NSString *)kCFStreamSSLCertificates];
+    }
+
     [_outputStream setProperty:SSLOptions
                         forKey:(__bridge id)kCFStreamPropertySSLSettings];
   }
@@ -597,6 +604,7 @@ - (void)closeWithCode:(NSInteger)code reason:(NSString *)reason;
       }
     }
 
+    [self.delegate webSocket:self didCloseWithCode:code reason:reason wasClean:YES];
     [self _sendFrameWithOpcode:RCTSROpCodeConnectionClose data:payload];
   });
 }
diff --git a/node_modules/react-native/React/Base/RCTKeyCommands.h b/node_modules/react-native/React/Base/RCTKeyCommands.h
index 4c9c1fe..8c0ebc3 100644
--- a/node_modules/react-native/React/Base/RCTKeyCommands.h
+++ b/node_modules/react-native/React/Base/RCTKeyCommands.h
@@ -14,10 +14,15 @@
 /**
  * Register a single-press keyboard command.
  */
-- (void)registerKeyCommandWithInput:(NSString *)input
+ - (void)registerKeyCommandWithInput:(NSString *)input
                       modifierFlags:(UIKeyModifierFlags)flags
                              action:(void (^)(UIKeyCommand *command))block;
 
+- (void)registerKeyCommand:(NSString *)input
+                      modifierFlags:(UIKeyModifierFlags)flags
+               discoverabilityTitle:(NSString *)discoverabilityTitle
+                             action:(void (^)(UIKeyCommand *))block;
+
 /**
  * Unregister a single-press keyboard command.
  */
diff --git a/node_modules/react-native/React/Base/RCTKeyCommands.m b/node_modules/react-native/React/Base/RCTKeyCommands.m
index 8f8f19b..150bcfe 100644
--- a/node_modules/react-native/React/Base/RCTKeyCommands.m
+++ b/node_modules/react-native/React/Base/RCTKeyCommands.m
@@ -12,8 +12,6 @@
 #import "RCTDefines.h"
 #import "RCTUtils.h"
 
-#if RCT_DEV
-
 @interface RCTKeyCommand : NSObject <NSCopying>
 
 @property (nonatomic, strong) UIKeyCommand *keyCommand;
@@ -114,7 +112,9 @@ - (void)RCT_handleKeyCommand:(UIKeyCommand *)key
   // NOTE: throttle the key handler because on iOS 9 the handleKeyCommand:
   // method gets called repeatedly if the command key is held down.
   static NSTimeInterval lastCommand = 0;
-  if (CACurrentMediaTime() - lastCommand > 0.5) {
+  if (CACurrentMediaTime() - lastCommand > 0.5 ||
+      [key.input isEqualToString:@"UIKeyInputUpArrow"] || // repeat command if is scroll
+      [key.input isEqualToString:@"UIKeyInputDownArrow"]) {
     for (RCTKeyCommand *command in [RCTKeyCommands sharedInstance].commands) {
       if ([command.keyCommand.input isEqualToString:key.input] &&
           command.keyCommand.modifierFlags == key.modifierFlags) {
@@ -184,6 +184,8 @@ - (void)RCT_handleDoublePressKeyCommand:(UIKeyCommand *)key
 
 @end
 
+#if RCT_DEV
+
 @implementation RCTKeyCommands
 
 + (void)initialize
@@ -228,6 +230,23 @@ - (void)registerKeyCommandWithInput:(NSString *)input
   [_commands addObject:keyCommand];
 }
 
+- (void)registerKeyCommand:(NSString *)input
+                      modifierFlags:(UIKeyModifierFlags)flags
+               discoverabilityTitle:(NSString *)discoverabilityTitle
+                             action:(void (^)(UIKeyCommand *))block
+{
+  RCTAssertMainQueue();
+
+  UIKeyCommand *command = [UIKeyCommand keyCommandWithInput:input
+                                              modifierFlags:flags
+                                                     action:@selector(RCT_handleKeyCommand:)
+                                       discoverabilityTitle:discoverabilityTitle];
+
+  RCTKeyCommand *keyCommand = [[RCTKeyCommand alloc] initWithKeyCommand:command block:block];
+  [_commands removeObject:keyCommand];
+  [_commands addObject:keyCommand];
+}
+
 - (void)unregisterKeyCommandWithInput:(NSString *)input
                         modifierFlags:(UIKeyModifierFlags)flags
 {
@@ -301,9 +320,48 @@ - (BOOL)isDoublePressKeyCommandRegisteredForInput:(NSString *)input
 
 @implementation RCTKeyCommands
 
++ (void)initialize
+{
+  // swizzle UIResponder
+  RCTSwapInstanceMethods([UIResponder class],
+                         @selector(keyCommands),
+                         @selector(RCT_keyCommands));
+}
+
 + (instancetype)sharedInstance
 {
-  return nil;
+  static RCTKeyCommands *sharedInstance;
+  static dispatch_once_t onceToken;
+  dispatch_once(&onceToken, ^{
+    sharedInstance = [self new];
+  });
+
+  return sharedInstance;
+}
+
+- (instancetype)init
+{
+  if ((self = [super init])) {
+    _commands = [NSMutableSet new];
+  }
+  return self;
+}
+
+- (void)registerKeyCommand:(NSString *)input
+                      modifierFlags:(UIKeyModifierFlags)flags
+               discoverabilityTitle:(NSString *)discoverabilityTitle
+                             action:(void (^)(UIKeyCommand *))block
+{
+  RCTAssertMainQueue();
+
+  UIKeyCommand *command = [UIKeyCommand keyCommandWithInput:input
+                                              modifierFlags:flags
+                                                     action:@selector(RCT_handleKeyCommand:)
+                                       discoverabilityTitle:discoverabilityTitle];
+
+  RCTKeyCommand *keyCommand = [[RCTKeyCommand alloc] initWithKeyCommand:command block:block];
+  [_commands removeObject:keyCommand];
+  [_commands addObject:keyCommand];
 }
 
 - (void)registerKeyCommandWithInput:(NSString *)input
@@ -311,7 +369,17 @@ - (void)registerKeyCommandWithInput:(NSString *)input
                              action:(void (^)(UIKeyCommand *))block {}
 
 - (void)unregisterKeyCommandWithInput:(NSString *)input
-                        modifierFlags:(UIKeyModifierFlags)flags {}
+                        modifierFlags:(UIKeyModifierFlags)flags
+{
+  RCTAssertMainQueue();
+
+  for (RCTKeyCommand *command in _commands.allObjects) {
+    if ([command matchesInput:input flags:flags]) {
+      [_commands removeObject:command];
+      break;
+    }
+  }
+}
 
 - (BOOL)isKeyCommandRegisteredForInput:(NSString *)input
                          modifierFlags:(UIKeyModifierFlags)flags
diff --git a/node_modules/react-native/ReactAndroid/src/debug/java/com/facebook/flipper/ReactNativeFlipper.java b/node_modules/react-native/ReactAndroid/src/debug/java/com/facebook/flipper/ReactNativeFlipper.java
index c2973ad..8edbbb2 100644
--- a/node_modules/react-native/ReactAndroid/src/debug/java/com/facebook/flipper/ReactNativeFlipper.java
+++ b/node_modules/react-native/ReactAndroid/src/debug/java/com/facebook/flipper/ReactNativeFlipper.java
@@ -20,6 +20,7 @@ import com.facebook.flipper.plugins.react.ReactFlipperPlugin;
 import com.facebook.flipper.plugins.sharedpreferences.SharedPreferencesFlipperPlugin;
 import com.facebook.react.BuildConfig;
 import com.facebook.react.modules.network.NetworkingModule;
+import com.facebook.react.modules.network.CustomClientBuilder;
 import okhttp3.OkHttpClient;
 
 public class ReactNativeFlipper {
@@ -37,7 +38,7 @@ public class ReactNativeFlipper {
 
       NetworkFlipperPlugin networkFlipperPlugin = new NetworkFlipperPlugin();
       NetworkingModule.setCustomClientBuilder(
-          new NetworkingModule.CustomClientBuilder() {
+          new CustomClientBuilder() {
             @Override
             public void apply(OkHttpClient.Builder builder) {
               builder.addNetworkInterceptor(new FlipperOkhttpInterceptor(networkFlipperPlugin));
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/CustomClientBuilder.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/CustomClientBuilder.java
new file mode 100644
index 0000000..db81d65
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/CustomClientBuilder.java
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.modules.network;
+
+import okhttp3.OkHttpClient;
+
+public interface CustomClientBuilder {
+  public void apply(OkHttpClient.Builder builder);
+}
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
index 84244d6..810a0e5 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
@@ -168,10 +168,6 @@ public final class NetworkingModule extends ReactContextBaseJavaModule {
     customClientBuilder = ccb;
   }
 
-  public static interface CustomClientBuilder {
-    public void apply(OkHttpClient.Builder builder);
-  }
-
   private static void applyCustomBuilder(OkHttpClient.Builder builder) {
     if (customClientBuilder != null) {
       customClientBuilder.apply(builder);
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java
index ef2ae93..2795802 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java
@@ -92,7 +92,7 @@ public class AndroidInfoModule extends ReactContextBaseJavaModule implements Tur
 
   private Boolean isRunningScreenshotTest() {
     try {
-      Class.forName("android.support.test.rule.ActivityTestRule");
+      Class.forName("androidx.test.rule.ActivityTestRule");
       return true;
     } catch (ClassNotFoundException ignored) {
       return false;
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/websocket/WebSocketModule.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/websocket/WebSocketModule.java
index bfc83f6..59d8018 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/websocket/WebSocketModule.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/websocket/WebSocketModule.java
@@ -22,6 +22,8 @@ import com.facebook.react.common.ReactConstants;
 import com.facebook.react.module.annotations.ReactModule;
 import com.facebook.react.modules.core.DeviceEventManagerModule;
 import com.facebook.react.modules.network.ForwardingCookieHandler;
+import com.facebook.react.modules.network.OkHttpClientProvider;
+import com.facebook.react.modules.network.CustomClientBuilder;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -53,6 +55,8 @@ public final class WebSocketModule extends ReactContextBaseJavaModule {
   private ReactContext mReactContext;
   private ForwardingCookieHandler mCookieHandler;
 
+  private static @Nullable CustomClientBuilder customClientBuilder = null;
+
   public WebSocketModule(ReactApplicationContext context) {
     super(context);
     mReactContext = context;
@@ -65,6 +69,16 @@ public final class WebSocketModule extends ReactContextBaseJavaModule {
         .emit(eventName, params);
   }
 
+  public static void setCustomClientBuilder(CustomClientBuilder ccb) {
+    customClientBuilder = ccb;
+  }
+
+  private static void applyCustomBuilder(OkHttpClient.Builder builder) {
+    if (customClientBuilder != null) {
+      customClientBuilder.apply(builder);
+    }
+  }
+
   @Override
   public String getName() {
     return NAME;
@@ -84,12 +98,15 @@ public final class WebSocketModule extends ReactContextBaseJavaModule {
       @Nullable final ReadableArray protocols,
       @Nullable final ReadableMap options,
       final int id) {
-    OkHttpClient client =
+    OkHttpClient.Builder okHttpBuilder =
         new OkHttpClient.Builder()
             .connectTimeout(10, TimeUnit.SECONDS)
             .writeTimeout(10, TimeUnit.SECONDS)
-            .readTimeout(0, TimeUnit.MINUTES) // Disable timeouts for read
-            .build();
+            .readTimeout(0, TimeUnit.MINUTES); // Disable timeouts for read
+
+    applyCustomBuilder(okHttpBuilder);
+
+    OkHttpClient client = okHttpBuilder.build();
 
     Request.Builder builder = new Request.Builder().tag(id).url(url);
 
